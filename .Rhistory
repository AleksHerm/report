purrr::flatten() %>%
paste(collapse = "SPLIT") %>%
stringr::str_split("SPLITSPLIT")
i <- 1
while (stringr::str_detect(citation[[1]][i], "To cite ")) {
i <- i + 1
}
citation <- citation[[1]][i] %>%
stringr::str_remove_all("SPLIT") %>%
stringr::str_trim() %>%
stringr::str_squish()
citations <- c(citations, citation)
versions <- c(versions, packageVersion(pkg_name))
}
return(data.frame("Package" = names(pkgs),
"Version" = versions,
"References" = citations))
}
cite_packages(sessionInfo())
pkgs <- session$otherPkgs
citations <- c()
versions <- c()
names <- c()
for (pkg_name in names(pkgs)) {
pkg <- pkgs[[pkg_name]]
citation <- format(citation(pkg_name))[[2]] %>%
stringr::str_split("\n") %>%
purrr::flatten() %>%
paste(collapse = "SPLIT") %>%
stringr::str_split("SPLITSPLIT")
i <- 1
while (stringr::str_detect(citation[[1]][i], "To cite ")) {
i <- i + 1
}
citation <- citation[[1]][i] %>%
stringr::str_remove_all("SPLIT") %>%
stringr::str_trim() %>%
stringr::str_squish()
citations <- c(citations, citation)
versions <- c(versions, packageVersion(pkg_name))
names <- c(names, pkg_name)
}
data <- data.frame("Package" =names,
"Version" = versions,
"References" = citations)
names
versions
packageVersion(pkg_name)
pkgs <- session$otherPkgs
citations <- c()
versions <- c()
names <- c()
for (pkg_name in names(pkgs)) {
pkg <- pkgs[[pkg_name]]
citation <- format(citation(pkg_name))[[2]] %>%
stringr::str_split("\n") %>%
purrr::flatten() %>%
paste(collapse = "SPLIT") %>%
stringr::str_split("SPLITSPLIT")
i <- 1
while (stringr::str_detect(citation[[1]][i], "To cite ")) {
i <- i + 1
}
citation <- citation[[1]][i] %>%
stringr::str_remove_all("SPLIT") %>%
stringr::str_trim() %>%
stringr::str_squish()
citations <- c(citations, citation)
versions <- c(versions, packageVersion(pkg_name)[1])
names <- c(names, pkg_name)
}
data <- data.frame("Package" = names,
"Version" = versions,
"References" = citations)
versions
packageVersion(pkg_name)
as.character(packageVersion(pkg_name))
pkgs <- session$otherPkgs
citations <- c()
versions <- c()
names <- c()
for (pkg_name in names(pkgs)) {
pkg <- pkgs[[pkg_name]]
citation <- format(citation(pkg_name))[[2]] %>%
stringr::str_split("\n") %>%
purrr::flatten() %>%
paste(collapse = "SPLIT") %>%
stringr::str_split("SPLITSPLIT")
i <- 1
while (stringr::str_detect(citation[[1]][i], "To cite ")) {
i <- i + 1
}
citation <- citation[[1]][i] %>%
stringr::str_remove_all("SPLIT") %>%
stringr::str_trim() %>%
stringr::str_squish()
citations <- c(citations, citation)
versions <- c(versions, as.character(packageVersion(pkg_name)))
names <- c(names, pkg_name)
}
data <- data.frame("Package" = names,
"Version" = versions,
"References" = citations)
data
show_packages <- function(session) {
pkgs <- session$otherPkgs
citations <- c()
versions <- c()
names <- c()
for (pkg_name in names(pkgs)) {
pkg <- pkgs[[pkg_name]]
citation <- format(citation(pkg_name))[[2]] %>%
stringr::str_split("\n") %>%
purrr::flatten() %>%
paste(collapse = "SPLIT") %>%
stringr::str_split("SPLITSPLIT")
i <- 1
while (stringr::str_detect(citation[[1]][i], "To cite ")) {
i <- i + 1
}
citation <- citation[[1]][i] %>%
stringr::str_remove_all("SPLIT") %>%
stringr::str_trim() %>%
stringr::str_squish()
citations <- c(citations, citation)
versions <- c(versions, as.character(packageVersion(pkg_name)))
names <- c(names, pkg_name)
}
data <- data.frame("Package" = names,
"Version" = versions,
"References" = citations)
return(data)
}
show_packages(session)
data <- show_packages(session)
library(report)
library(report)
knitr::kable(cite_packages(sessionInfo()))
show_packages(sessionInfo())
data <- show_packages(session)
data <- select(data, -one_of("Package", "Version"))
data
knitr::kable(cite_packages(sessionInfo()))
library(report)
library(report)
library(dplyr)
library(knitr)
knitr::kable(cite_packages(sessionInfo()))
pkgdown::build_site()
library(report)
library(report)
pkgdown::build_site()
model <- aov(Sepal.Length ~ Species, data=iris)
broom::tidy(model)
CI = 95
broom::confint_tidy(model, CI / 100)
# Processing
table_parameters <- broom::tidy(model) %>%
rename_(
"Parameter" = "term",
"DoF" = "df",
"Sum_Squares" = "sumsq",
"Mean_Square" = "meansq",
"F" = "statistic",
"p" = "p.value"
)
library(dplyr)
# Processing
table_parameters <- broom::tidy(model) %>%
rename_(
"Parameter" = "term",
"DoF" = "df",
"Sum_Squares" = "sumsq",
"Mean_Square" = "meansq",
"F" = "statistic",
"p" = "p.value"
)
table_parameters
broom::glance(model)
table_indices <- broom::glance(model) %>%
rename_(
"R2" = "r.squared",
"R2_adj" = "adj.r.squared",
"F" = "statistic",
"p" = "p.value",
"DoF" = "df",
"DoF_residual" = "df.residual"
)
table_indices
table_parameters
table_indices$Formula <- Reduce(paste, deparse(stats::formula(model)))
table_indices$Model_Name <- "ANOVA"
# Values
out <- as.list(table_indices)
table_parameters$DoF_residual <- out$DoF_residual
out$table_parameters <- table_parameters
out$table_indices <- table_indices
out$Parameters <- list()
for (parameter in table_parameters$Parameter) {
out$Parameters[[parameter]] <- as.list(table_parameters[table_parameters$Parameter == parameter, ])
}
out
model
es <- sjstats::aov_stat(model, type = type)
install.packages("sjstats")
type <-
es <- sjstats::aov_stat(model, type = "pomega")
aov_stat <- function(model, type) {
aov.sum <- aov_stat_summary(model)
aov.res <- aov_stat_core(aov.sum, type)
if (obj_has_name(aov.sum, "stratum"))
attr(aov.res, "stratum") <- aov.sum[["stratum"]]
aov.res
}
#' @importFrom stats anova residuals
#' @importFrom broom tidy
aov_stat_summary <- function(model) {
# check if we have a mixed model
mm <- is_merMod(model)
ori.model <- model
# check that model inherits from correct class
# else, try to coerce to anova table
if (!inherits(model, c("Gam", "aov", "anova", "anova.rms", "aovlist")))
model <- stats::anova(model)
# get summary table
aov.sum <- as.data.frame(broom::tidy(model))
# for mixed models, add information on residuals
if (mm) {
res <- stats::residuals(ori.model)
aov.sum <- dplyr::bind_rows(
aov.sum,
data_frame(
term = "Residuals",
df = length(res) - sum(aov.sum[["df"]]),
sumsq = sum(res^2, na.rm = TRUE),
meansq = mse(ori.model),
statistic = NA
)
)
}
# check if object has sums of square
if (!obj_has_name(aov.sum, "sumsq")) {
stop("Model object has no sums of squares. Cannot compute effect size statistic.", call. = FALSE)
}
# need special handling for rms-anova
if (inherits(model, "anova.rms"))
colnames(aov.sum) <- c("term", "df", "sumsq", "meansq", "statistic", "p.value")
# for car::Anova, the meansq-column might be missing, so add it manually
if (!obj_has_name(aov.sum, "meansq"))
aov.sum <- sjmisc::add_variables(aov.sum, meansq = aov.sum$sumsq / aov.sum$df, .after = "sumsq")
aov.sum
}
aov_stat_core <- function(aov.sum, type) {
# get mean squared of residuals
meansq.resid <- aov.sum[["meansq"]][nrow(aov.sum)]
# get total sum of squares
ss.total <- sum(aov.sum[["sumsq"]])
# get sum of squares of residuals
ss.resid <- aov.sum[["sumsq"]][nrow(aov.sum)]
# number of terms in model
n_terms <- nrow(aov.sum) - 1
# number of observations
N <- sum(aov.sum[["df"]]) + 1
if (type == "omega") {
# compute omega squared for each model term
aovstat <- purrr::map_dbl(1:n_terms, function(x) {
ss.term <- aov.sum[["sumsq"]][x]
df.term <- aov.sum[["df"]][x]
(ss.term - df.term * meansq.resid) / (ss.total + meansq.resid)
})
} else if (type == "pomega") {
# compute partial omega squared for each model term
aovstat <- purrr::map_dbl(1:n_terms, function(x) {
df.term <- aov.sum[["df"]][x]
meansq.term <- aov.sum[["meansq"]][x]
(df.term * (meansq.term - meansq.resid)) / (df.term * meansq.term + (N - df.term) * meansq.resid)
})
} else if (type == "eta") {
# compute eta squared for each model term
aovstat <-
purrr::map_dbl(1:n_terms, ~ aov.sum[["sumsq"]][.x] / sum(aov.sum[["sumsq"]]))
} else if (type %in% c("cohens.f", "peta")) {
# compute partial eta squared for each model term
aovstat <-
purrr::map_dbl(1:n_terms, ~ aov.sum[["sumsq"]][.x] / (aov.sum[["sumsq"]][.x] + ss.resid))
}
# compute Cohen's F
if (type == "cohens.f") aovstat <- sqrt(aovstat / (1 - aovstat))
# give values names of terms
names(aovstat) <- aov.sum[["term"]][1:n_terms]
aovstat
}
es <- aov_stat(model, type = "pomega")
library(report)
interpret_d(0.6, rules=rules(c(0.5), c("A", "B")))
testthat::expect_equal(interpret_d(0.6, rules=rules(c(0.5), c("A", "B"))), "B")
testthat::expect_equal(interpret_p(0.6, rules=rules(c(0.5), c("A", "B"))), "B")
testthat::expect_equal(interpret_r(0.6, rules=rules(c(0.5), c("A", "B"))), "B")
interpret_r(0.6, rules="DUPA")
testthat::expect_error(interpret_r(0.6, rules="DUPA")
})
testthat::expect_error(interpret_r(0.6, rules="DUPA"))
r <- report(seq(0, 1, length.out = 100))
(print(r, width=40)
)
print(r, width=40)
print(r, width=10)
nchar(print(r, width=10))
testthat::expect_equal(nchar(print(r, width=10)), 33)
testthat::expect_is(print(r), "character")
testthat::expect_is(to_text(r), "character")
testthat::expect_is(to_fulltext(r), "character")
r
as.list(r)
summary(r, digits=2)
summary(r)
to_table(r)
library(report)
summary(r)
summary(r, digits=2)
x <- r
full = FALSE
digits <- 2
if (full == TRUE) {
table <- x$table_full
} else {
table <- x$table
}
if (!is.null(digits)) {
initial_order <- names(table)
nums <- dplyr::select_if(table, is.numeric)
nums <- sapply(nums, format_value, digits = digits)
fact <- dplyr::select_if(table, is.character)
fact <- cbind(fact, dplyr::select_if(table, is.factor))
table <- cbind(fact, nums)
table <- table[initial_order]
}
initial_order <- names(table)
nums <- dplyr::select_if(table, is.numeric)
nums <- sapply(nums, format_value, digits = digits)
fact <- dplyr::select_if(table, is.character)
fact <- cbind(fact, dplyr::select_if(table, is.factor))
table <- cbind(fact, nums)
fact
nums
cbind(as.data.frame(fact), nums)
nrow(facts)
nrow(fact)
fact
nums
table <- x$table
table
initial_order <- names(table)
initial_order
nums <- dplyr::select_if(table, is.numeric)
nums
nums <- sapply(nums, format_value, digits = digits)
nums
fact <- dplyr::select_if(table, is.character)
fact <- cbind(fact, dplyr::select_if(table, is.factor))
fact
cbind(fact, nums)
nrow(fact)
fact
ncol(fact)
ncol(dplyr::select_if(table, is.numeric))
!is.null(digits) & ncol(dplyr::select_if(table, is.numeric)) > 0
library(report)
summary(r, digits=2)
testthat::expect_is(summary(r, digits=2), "data.frame")
summary(r, digits=2)
ncol(summary(r, digits=2))
as.data.frame(summary(r, digits=2))
data.frame(summary(r, digits=2))
as.data.frame(t(summary(r, digits=2)))
initial_order <- names(table)
nums <- dplyr::select_if(table, is.numeric)
nums <- sapply(nums, format_value, digits = digits)
fact <- dplyr::select_if(table, is.character)
fact <- cbind(fact, dplyr::select_if(table, is.factor))
if(ncol(fact) == 0){
table <- nums
} else {
table <- cbind(fact, nums)
}
table <- table[initial_order]
table
class(table)
table <- as.data.frame(t(table))
table
library(report)
testthat::expect_is(summary(r, digits=2), "data.frame")
testthat::expect_is(summary(r, digits=2), "data.frame")
summary(report(iris), digits=2)
testthat::expect_is(summary(report(iris), digits=2)$n_Obs, "data.frame")
testthat::expect_is(summary(report(iris), digits=2)$n_Obs, "factor")
library(report)
summary(report(iris), digits=2)
format_value <- function(x, digits = 2) {
if(is.na(x)){
return(x)
} else{
return(trimws(format(round(x, digits), nsmall = digits)))
}
}
format_value(c(0.0045, 234))
is.na(x)
x <- c(3, 6, NA)
is.na(x)
format_value <- function(x, digits = 2) {
x <- ifelse(is.na(x), NA, trimws(format(round(x, digits), nsmall = digits)))
return(x)
}
format_value(x)
format_value(c(0.0045, 234))
library(report)
summary(r, digits=2)
summary(report(iris), digits=2)
is.integer(5)
is.int <- function(x){
ifelse(x %% 1 == 0, TRUE, FALSE)
}
is.int(5)
is.int(7, 3.1)
is.int(c(7, 3.1))
library(report)
summary(report(iris), digits=2)
library(report)
summary(report(iris), digits=2)
library(report)
summary(mtcars)
model <- glm(am ~ wt * mpg, data=mtcars, family="binomial")
summary(model)
model <- glm(am ~ wt * mpg, data=mtcars, family="logit")
model <- glm(am ~ wt * mpg, data=mtcars, family="binomial")
mtcars
model <- glm(am ~ wt * qsec, data=mtcars, family="binomial")
summary(model)
model <- glm(am ~ wt * drat, data=mtcars, family="binomial")
summary(model)
model <- glm(am ~ mpg * drat, data=mtcars, family="binomial")
summary(model)
model <- glm(vs * drat, data=mtcars, family="binomial")
summary(model)
model <- glm(vs ~ mpg * drat, data=mtcars, family="binomial")
summary(model)
model <- glm(vs ~ mpg, data=mtcars, family="binomial")
summary(model)
model_data(model)
model_values(model)
sjstats::r2(model)
rules_grid <- rules(c(0.01, 0.05), c("very significant", "significant", "not significant"))
testthat::expect_equal(interpret(0.001, rules_grid), "very significant")
testthat::expect_equal(interpret(0.021, rules_grid), "significant")
testthat::expect_equal(interpret(0.08, rules_grid), "not significant")
testthat::expect_equal(interpret(c(0.01, 0.005, 0.08), rules_grid), c("significant", "very significant", "not significant"))
testthat::expect_equal(interpret_r(0.21), "positive and small")
testthat::expect_equal(interpret_r(0.7, rules = "evans1996"), "positive and strong")
testthat::expect_equal(interpret_r(c(0.5, -0.08)), c("positive and large", "negative and very small"))
testthat::expect_equal(interpret_r(0.6, rules=rules(c(0.5), c("A", "B"))), "B")
testthat::expect_error(interpret_r(0.6, rules="DUPA"))
(interpret_p(0.021), "significant")
(interpret_p(0.021), "significant")
(interpret_p(0.021), "significant")
testthat::expect_equal(interpret_p(0.021), "significant")
testthat::expect_equal(interpret_p(0.08), "not significant")
testthat::expect_equal(interpret_p(c(0.01, 0.08)), c("significant", "not significant"))
testthat::expect_equal(interpret_p(0.6, rules=rules(c(0.5), c("A", "B"))), "B")
testthat::expect_error(interpret_p(0.6, rules="DUPA"))
testthat::expect_equal(interpret_direction(c(0.01, -0.08)), c("positive", "negative"))
testthat::expect_equal(interpret_d(0.021), "very small")
testthat::expect_equal(interpret_d(0.6), "medium")
testthat::expect_equal(interpret_d(1.3, rules="sawilowsky2009"), "very large")
testthat::expect_equal(interpret_d(c(0.45, 0.85)), c("small", "not large"))
testthat::expect_equal(interpret_d(0.6, rules=rules(c(0.5), c("A", "B"))), "B")
testthat::expect_error(interpret_d(0.6, rules="DUPA"))
interpret_d(c(0.45, 0.85))
# Correlations
r <- report(cor.test(iris$Sepal.Width, iris$Sepal.Length))
testthat::expect_equal(r$values$r, -0.117, tol = 0.01)
r <- report(cor.test(iris$Sepal.Width, iris$Sepal.Length, method = "spearman"))
testthat::expect_equal(r$values$rho, -0.166, tol = 0.01)
r <- report(cor.test(iris$Sepal.Width, iris$Sepal.Length, method = "kendall"))
testthat::expect_equal(r$values$tau, -0.076, tol = 0.01)
# t-tests
r <- report(t.test(iris$Sepal.Width, iris$Sepal.Length, var.equal = TRUE))
library(report)
x <- c("A", "B", "C", "A", "B", "B", "D", "E", "B", "D", "A")
r <- report(x)
testthat::expect_equal(nrow(r$table), 1, tol = 0)
testthat::expect_null(r$table$Median)
r <- report(x, levels_percentage = FALSE, missing_percentage = TRUE)
testthat::expect_equal(nrow(r$table), 1, tol = 0)
testthat::expect_equal(r$table$percentage_Missing[1], 0, tol = 0)
x <- c("A", "B", "C", "A", "B", "B", "D", "E", "B", "D", "A")
report(x)
report(x, n_characters = 2, levels_percentage = TRUE, missing_percentage = TRUE)
to_fulltext(report(x))
to_table(report(x, n_characters = "all"))
to_fulltable(report(x))
library(report)
library(report)
pkgdown::build_site()
library(report)
model <- lm(Sepal.Length ~ Petal.Length + Species, data=iris)
r <- report(model)
to_text(r, width=100)
to_fulltext(r)
to_fulltext(r, width=100)
to_table(r)
knitr::kable(to_table(r, digits=2))
to_fulltable(r)
