pkgdown::build_site()
library(report)
library(report)
pkgdown::build_site()
x <- report(iris)
text <- x$text_full
strwrap(text)
text <- strwrap(text)
cat(text, sep = "\n")
text <- x$text_full
x <- text
text <- stringr::str_split(x, "\n")
text
text <- paste0(text, collapse = "\n")
cat(text)
text <- stringr::str_split(x, "\n")
text
text <- stringr::str_split(x, "\n", simplify=TRUE)
text
text <- paste0(text, collapse = "\n")
cat(text)
text <- stringr::str_split(x, "\n", simplify=TRUE)
text <- strwrap(text)
text <- paste0(text, collapse = "\n")
cat(text)
getOption("width")
getOption("width")
styler::style_pkg
styler::style_pkg()
library(report)
print(report(iris), width=80)
print(report(iris), width=20)
to_fulltext(r, width=80)
r <- report(model)
model <- lm(Sepal.Length ~ Petal.Length + Species, data=iris)
r <- report(model)
to_fulltext(r, width=80)
to_fulltext(r, width=50)
to_fulltext(r, width=10)
library(report)
styler::style_pkg()
pkgdown::build_site()
pkgdown::build_site()
library(report)
iris %>%
group_by(Species) %>%
report(median = TRUE, range = FALSE) %>%
print(width=100)
library(dplyr)
library(report)
iris %>%
group_by(Species) %>%
report(median = TRUE, range = FALSE) %>%
print(width=100)
iris %>%
group_by(Species) %>%
report(median = TRUE, range = FALSE) %>%
print(width=100)
iris %>%
group_by(Species) %>%
report(median = TRUE, range = FALSE)  # Display only the Median and MAD
iris %>%
group_by(Species) %>%
report(median = TRUE, range = FALSE) %>% x
library(dplyr)
library(report)
iris %>%
group_by(Species) %>%
report(median = TRUE, range = FALSE) %>% x
x <- iris %>%
group_by(Species) %>%
report(median = TRUE, range = FALSE)
text <- x$text_full
x <- text
cat(x)
width=80
text <- stringr::str_split(x, "\n", simplify = TRUE)
text <- strwrap(text, width = width)
text <- paste0(text, collapse = "\n")
cat(text)
text
text <- stringr::str_split(x, "\n", simplify = TRUE)
text
x
text <- stringr::str_split(x, fixed("\n"), simplify = TRUE)
text <- stringr::str_split(x, stringr::fixed("\n"), simplify = TRUE)
text
text <- stringr::str_split(x, stringr::coll("\n"), simplify = TRUE)
text
text <- stringr::str_split(x, stringr::coll("\n"), simplify = F)
text
text <- unlist(text)
text
text <- strwrap(text, width = width)
text <- paste0(text, collapse = "\n")
cat(text)
text <- stringr::str_split(x, stringr::coll("\n"), simplify = FALSE)
text <- unlist(text)
text <- strwrap(text, width = width)
text
text <- stringr::str_split(x, stringr::coll("\n"), simplify = FALSE)
text <- unlist(text)
text <- strwrap(text, width = width, simplify=FALSE)
text
text <- stringr::str_split(x, stringr::coll("\n"), simplify = FALSE)
text <- unlist(text)
text
length(text)
nchar(text)
text[nchar(text) < width]
text[nchar(text) > width] <- strwrap(text[nchar(text) > width], width = width)
text[nchar(text) > width]
nchar(text) > width
width=50
(any(nchar(text) > width))
text[nchar(text) > width] <- strwrap(text[nchar(text) > width], width = width)
nchar(text) > width
any(nchar(text) > width)
text <- stringr::str_split(x, stringr::coll("\n"), simplify = FALSE)
text <- unlist(text)
if (is.null(width)) {
width <- 0.9 * getOption("width")
}
nchar(text)
width
nchar(text) > width
any(nchar(text) > width)
text[nchar(text) > width]
nchar(text)
text[nchar(text) > width] <- strwrap(text[nchar(text) > width], width = width, simplify=FALSE)
text
text <- stringr::str_split(x, stringr::coll("\n"), simplify = FALSE)
text <- unlist(text)
text
text <- stringr::str_split(x, stringr::coll("\n"), simplify = FALSE)
text <- unlist(text)
if (is.null(width)) {
width <- 0.9 * getOption("width")
}
wrapped <- ""
for(s in text){
if(nchar(s) > width){
1+1
}
wrapped <- paste0(wrapped, "\n", s)
}
wrapped
cat(wrapped)
wrapped <- ""
for(s in text){
if(nchar(s) > width){
1+1
}
wrapped <- paste0(wrapped, s, "\n")
}
cat(wrapped)
nchar(s)
nchar(s)
s
nchar(s) - stringr::str_trim(s)
leading_spaces <- nchar(s) - nchar(stringr::str_trim(s))
leading_spaces
s <- strwrap(s, width = width)
s
rep(" ", leading_spaces)
s <- paste0(s, collapse = "\n")
s
s
s <- paste0(rep(" ", leading_spaces), s)
s
text <- stringr::str_split(x, stringr::coll("\n"), simplify = FALSE)
text <- unlist(text)
if (is.null(width)) {
width <- 0.9 * getOption("width")
}
wrapped <- ""
for(s in text){
if(nchar(s) > width){
leading_spaces <- nchar(s) - nchar(stringr::str_trim(s))
s <- strwrap(s, width = width)
s <- paste0(s, collapse = "\n")
s <- paste0(rep(" ", leading_spaces), s)
}
wrapped <- paste0(wrapped, s, "\n")
}
text <- paste0(text, collapse = "\n")
cat(text)
cat(wrapped)
library(report)
model <- lm(Sepal.Length ~ Petal.Length + Species, data=iris)
r <- report(model)
r
pkgdown::build_site()
x <- paste(rep("a very long string", 50))
x
x <- paste(rep("a very long string", 50), collapse=" ")
x
format_text_wrap(x, width=50)
library(report)
# Example
lm(Sepal.Length ~ Species, data=iris) %>%
report() %>%
to_text(width=100)
library(dplyr)
# Example
lm(Sepal.Length ~ Species, data=iris) %>%
report() %>%
to_text(width=100)
library(report)
library(dplyr)
# Example
lm(Sepal.Length ~ Species, data=iris) %>%
report() %>%
to_text(width=100)
lm(Sepal.Length ~ Species, data=iris) %>%
report()
report(iris)
print(report(iris), width=100)
iris %>%
group_by(Species) %>%
report(median = TRUE, range = FALSE)  # Display only the Median and MAD
report(cor.test(iris$Sepal.Length, iris$Petal.Length))
print(report(cor.test(iris$Sepal.Length, iris$Petal.Length)), width=100)
model <- lm(Sepal.Length ~ Petal.Length + Species, data=iris)
r <- report(model)
to_text(r)
r
model <- lm(Sepal.Length ~ Petal.Length + Species, data=iris)
r <- report(model)
to_text(r, width=100)
model <- lm(Sepal.Length ~ Petal.Length + Species, data=iris)
r <- report(model)
to_text(r)
text <- r$text_full
widht=100
format_text_wrap(text, width = width)
width=100
format_text_wrap(text, width = width)
x <- text
format_text_wrap(x, width=50)
text <- stringr::str_split(x, stringr::coll("\n"), simplify = FALSE)
text <- unlist(text)
if (is.null(width)) {
width <- 0.9 * getOption("width")
}
wrapped <- ""
for(s in text){
if(nchar(s) > width){
leading_spaces <- nchar(s) - nchar(stringr::str_trim(s))
s <- strwrap(s, width = width)
s <- paste0(s, collapse = "\n")
s <- paste0(rep(" ", leading_spaces), s)
}
wrapped <- paste0(wrapped, s, "\n")
}
wrapped
text <- stringr::str_split(x, stringr::coll("\n"), simplify = FALSE)
text <- unlist(text)
if (is.null(width)) {
width <- 0.9 * getOption("width")
}
text
wrapped <- ""
s
text
for(s in text){
print(s)
}
s
leading_spaces <- nchar(s) - nchar(stringr::str_trim(s))
s <- strwrap(s, width = width)
s <- paste0(s, collapse = "\n")
s
paste0(rep(" ", leading_spaces), s)
paste0(rep(" ", leading_spaces), s, collapse = "")
}
paste0(rep(" ", leading_spaces), s, collapse = "")
paste0(paste0(rep(" ", leading_spaces), collapse = ""), s)
format_text_wrap <- function(x, width = NULL) {
text <- stringr::str_split(x, stringr::coll("\n"), simplify = FALSE)
text <- unlist(text)
if (is.null(width)) {
width <- 0.9 * getOption("width")
}
wrapped <- ""
for(s in text){
if(nchar(s) > width){
leading_spaces <- nchar(s) - nchar(stringr::str_trim(s))
s <- strwrap(s, width = width)
s <- paste0(s, collapse = "\n")
s <- paste0(paste0(rep(" ", leading_spaces), collapse = ""), s)
}
wrapped <- paste0(wrapped, s, "\n")
}
return(wrapped)
}
x <- paste(rep("a very long string", 50), collapse=" ")
format_text_wrap(x, width=50)
library(report)
pkgdown::build_site()
library(devtools)
cite_packages(sessionInfo())
library(report)
library(report)
library(report)
cite_packages(sessionInfo())
sessionInfo()
session <- sessionInfo()
pkgs <- session$otherPkgs
citations <- c()
for (pkg_name in names(pkgs)) {
pkg <- pkgs[[pkg_name]]
citation <- format(citation(pkg_name))[[2]] %>%
stringr::str_split("\n") %>%
purrr::flatten() %>%
paste(collapse = "SPLIT") %>%
stringr::str_split("SPLITSPLIT")
i <- 1
while (stringr::str_detect(citation[[1]][i], "To cite ")) {
i <- i + 1
}
citation <- citation[[1]][i] %>%
stringr::str_remove_all("SPLIT") %>%
stringr::str_trim() %>%
stringr::str_squish()
citations <- c(citations, citation)
}
pkg
version(pkg)
version(pkg_name)
packageVersion(pkg_name)
pkgs <- session$otherPkgs
citations <- c()
versions <- c()
for (pkg_name in names(pkgs)) {
pkg <- pkgs[[pkg_name]]
citation <- format(citation(pkg_name))[[2]] %>%
stringr::str_split("\n") %>%
purrr::flatten() %>%
paste(collapse = "SPLIT") %>%
stringr::str_split("SPLITSPLIT")
i <- 1
while (stringr::str_detect(citation[[1]][i], "To cite ")) {
i <- i + 1
}
citation <- citation[[1]][i] %>%
stringr::str_remove_all("SPLIT") %>%
stringr::str_trim() %>%
stringr::str_squish()
citations <- c(citations, citation)
versions <- c(versions, packageVersion(pkg_name))
}
cite_packages <- function(session) {
pkgs <- session$otherPkgs
citations <- c()
versions <- c()
for (pkg_name in names(pkgs)) {
pkg <- pkgs[[pkg_name]]
citation <- format(citation(pkg_name))[[2]] %>%
stringr::str_split("\n") %>%
purrr::flatten() %>%
paste(collapse = "SPLIT") %>%
stringr::str_split("SPLITSPLIT")
i <- 1
while (stringr::str_detect(citation[[1]][i], "To cite ")) {
i <- i + 1
}
citation <- citation[[1]][i] %>%
stringr::str_remove_all("SPLIT") %>%
stringr::str_trim() %>%
stringr::str_squish()
citations <- c(citations, citation)
versions <- c(versions, packageVersion(pkg_name))
}
return(data.frame("Package" = names(pkgs),
"Version" = versions,
"References" = citations))
}
cite_packages(sessionInfo())
pkgs <- session$otherPkgs
citations <- c()
versions <- c()
names <- c()
for (pkg_name in names(pkgs)) {
pkg <- pkgs[[pkg_name]]
citation <- format(citation(pkg_name))[[2]] %>%
stringr::str_split("\n") %>%
purrr::flatten() %>%
paste(collapse = "SPLIT") %>%
stringr::str_split("SPLITSPLIT")
i <- 1
while (stringr::str_detect(citation[[1]][i], "To cite ")) {
i <- i + 1
}
citation <- citation[[1]][i] %>%
stringr::str_remove_all("SPLIT") %>%
stringr::str_trim() %>%
stringr::str_squish()
citations <- c(citations, citation)
versions <- c(versions, packageVersion(pkg_name))
names <- c(names, pkg_name)
}
data <- data.frame("Package" =names,
"Version" = versions,
"References" = citations)
names
versions
packageVersion(pkg_name)
pkgs <- session$otherPkgs
citations <- c()
versions <- c()
names <- c()
for (pkg_name in names(pkgs)) {
pkg <- pkgs[[pkg_name]]
citation <- format(citation(pkg_name))[[2]] %>%
stringr::str_split("\n") %>%
purrr::flatten() %>%
paste(collapse = "SPLIT") %>%
stringr::str_split("SPLITSPLIT")
i <- 1
while (stringr::str_detect(citation[[1]][i], "To cite ")) {
i <- i + 1
}
citation <- citation[[1]][i] %>%
stringr::str_remove_all("SPLIT") %>%
stringr::str_trim() %>%
stringr::str_squish()
citations <- c(citations, citation)
versions <- c(versions, packageVersion(pkg_name)[1])
names <- c(names, pkg_name)
}
data <- data.frame("Package" = names,
"Version" = versions,
"References" = citations)
versions
packageVersion(pkg_name)
as.character(packageVersion(pkg_name))
pkgs <- session$otherPkgs
citations <- c()
versions <- c()
names <- c()
for (pkg_name in names(pkgs)) {
pkg <- pkgs[[pkg_name]]
citation <- format(citation(pkg_name))[[2]] %>%
stringr::str_split("\n") %>%
purrr::flatten() %>%
paste(collapse = "SPLIT") %>%
stringr::str_split("SPLITSPLIT")
i <- 1
while (stringr::str_detect(citation[[1]][i], "To cite ")) {
i <- i + 1
}
citation <- citation[[1]][i] %>%
stringr::str_remove_all("SPLIT") %>%
stringr::str_trim() %>%
stringr::str_squish()
citations <- c(citations, citation)
versions <- c(versions, as.character(packageVersion(pkg_name)))
names <- c(names, pkg_name)
}
data <- data.frame("Package" = names,
"Version" = versions,
"References" = citations)
data
show_packages <- function(session) {
pkgs <- session$otherPkgs
citations <- c()
versions <- c()
names <- c()
for (pkg_name in names(pkgs)) {
pkg <- pkgs[[pkg_name]]
citation <- format(citation(pkg_name))[[2]] %>%
stringr::str_split("\n") %>%
purrr::flatten() %>%
paste(collapse = "SPLIT") %>%
stringr::str_split("SPLITSPLIT")
i <- 1
while (stringr::str_detect(citation[[1]][i], "To cite ")) {
i <- i + 1
}
citation <- citation[[1]][i] %>%
stringr::str_remove_all("SPLIT") %>%
stringr::str_trim() %>%
stringr::str_squish()
citations <- c(citations, citation)
versions <- c(versions, as.character(packageVersion(pkg_name)))
names <- c(names, pkg_name)
}
data <- data.frame("Package" = names,
"Version" = versions,
"References" = citations)
return(data)
}
show_packages(session)
data <- show_packages(session)
library(report)
library(report)
knitr::kable(cite_packages(sessionInfo()))
show_packages(sessionInfo())
data <- show_packages(session)
data <- select(data, -one_of("Package", "Version"))
data
knitr::kable(cite_packages(sessionInfo()))
library(report)
library(report)
library(dplyr)
library(knitr)
knitr::kable(cite_packages(sessionInfo()))
pkgdown::build_site()
library(report)
library(report)
pkgdown::build_site()
