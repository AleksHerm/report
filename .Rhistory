for(group in names(xlist)){
r <- report(xlist[[group]])
text <- c(text, r$text)
}
xlist[[group]]
data <- xlist[[group]]
data <- select(data, -one_of(groups))
r <- report(data)
x <- group_by(iris, Species)
groups <- group_vars(x)
ungrouped_x <- ungroup(x)
xlist <- split(ungrouped_x, ungrouped_x[groups], sep = " - ")
text <- paste0("The data contains ", nrow(ungrouped_x),
" observations, grouped by ",
format_text_collapse(groups),
", of the following variables:")
text_full <- text
for(group in names(xlist)){
data <- xlist[[group]]
data <- select(data, -one_of(groups))
r <- report(data)
text <- c(text, r$text)
}
text
library(report)
r <- report(data)
text <- paste0("The data contains ", nrow(ungrouped_x),
" observations, grouped by ",
format_text_collapse(groups),
", of the following variables:")
text_full <- text
for(group in names(xlist)){
data <- xlist[[group]]
data <- select(data, -one_of(groups))
r <- report(data)
text <- paste0(text, r$values$text_variables)
text_full <- paste0(text, r$values$text_full_variables)
}
text
cat(text)
text <- paste0("The data contains ", nrow(ungrouped_x),
" observations, grouped by ",
format_text_collapse(groups),
", of the following variables:")
text_full <- text
for(group in names(xlist)){
data <- xlist[[group]]
data <- select(data, -one_of(groups))
r <- report(data)
text <- paste0(text, "- group:", r$values$text_variables)
text_full <- paste0(text, r$values$text_full_variables)
}
cat(text)
text <- paste0("The data contains ", nrow(ungrouped_x),
" observations, grouped by ",
format_text_collapse(groups),
", of the following variables:")
text_full <- text
for(group in names(xlist)){
data <- xlist[[group]]
data <- select(data, -one_of(groups))
r <- report(data)
text <- paste0(text, "\n- group:", r$values$text_variables)
text_full <- paste0(text, r$values$text_full_variables)
}
cat(text)
median = FALSE
dispersion = TRUE
range = TRUE
levels_percentage = FALSE
n_characters = 3
missing_percentage = FALSE
text <- paste0("The data contains ", nrow(ungrouped_x),
" observations, grouped by ",
format_text_collapse(groups),
", of the following variables:")
text_full <- text
for(group in names(xlist)){
data <- xlist[[group]]
data <- select(data, -one_of(groups))
r <- report(data, median=median, dispersion=dispersion, range=range, levels_percentage=levels_percentage, n_characters=n_characters, missing_percentage = missing_percentage)
text <- paste0(text, "\n- ", group, " (n = ", nrow(data), ":)", r$values$text_variables)
text_full <- paste0(text, r$values$text_full_variables)
}
text
cat(text)
x <- group_by(mtcars, am, vs)
groups <- group_vars(x)
ungrouped_x <- ungroup(x)
xlist <- split(ungrouped_x, ungrouped_x[groups], sep = " - ")
text <- paste0("The data contains ", nrow(ungrouped_x),
" observations, grouped by ",
format_text_collapse(groups),
", of the following variables:")
text_full <- text
for(group in names(xlist)){
data <- xlist[[group]]
data <- select(data, -one_of(groups))
r <- report(data, median=median, dispersion=dispersion, range=range, levels_percentage=levels_percentage, n_characters=n_characters, missing_percentage = missing_percentage)
text <- paste0(text, "\n- ", group, " (n = ", nrow(data), "):", r$values$text_variables)
text_full <- paste0(text, r$values$text_full_variables)
}
cat(text)
groups <- group_vars(x)
ungrouped_x <- ungroup(x)
xlist <- split(ungrouped_x, ungrouped_x[groups], sep = paste0(groups, " - "))
text <- paste0("The data contains ", nrow(ungrouped_x),
" observations, grouped by ",
format_text_collapse(groups),
", of the following variables:")
text_full <- text
for(group in names(xlist)){
data <- xlist[[group]]
data <- select(data, -one_of(groups))
r <- report(data, median=median, dispersion=dispersion, range=range, levels_percentage=levels_percentage, n_characters=n_characters, missing_percentage = missing_percentage)
text <- paste0(text, "\n- ", group, " (n = ", nrow(data), "):", r$values$text_variables)
text_full <- paste0(text, r$values$text_full_variables)
}
cat(text)
table <- data.frame()
table_full <- data.frame()
current_table <- r$table
table <- data.frame()
table_full <- data.frame()
values = list()
for(group in names(xlist)){
data <- xlist[[group]]
data <- select(data, -one_of(groups))
r <- report(data, median=median, dispersion=dispersion, range=range, levels_percentage=levels_percentage, n_characters=n_characters, missing_percentage = missing_percentage)
text <- paste0(text, "\n- ", group, " (n = ", nrow(data), "):", r$values$text_variables)
text_full <- paste0(text, r$values$text_full_variables)
current_table <- r$table
current_table$Group <- Group
table <- rbind(table, current_table)
values[[group]] <- r$values
}
table <- data.frame()
table_full <- data.frame()
values = list()
for(group in names(xlist)){
data <- xlist[[group]]
data <- select(data, -one_of(groups))
r <- report(data, median=median, dispersion=dispersion, range=range, levels_percentage=levels_percentage, n_characters=n_characters, missing_percentage = missing_percentage)
text <- paste0(text, "\n- ", group, " (n = ", nrow(data), "):", r$values$text_variables)
text_full <- paste0(text, r$values$text_full_variables)
current_table <- r$table
current_table$Group <- group
table <- rbind(table, current_table)
values[[group]] <- r$values
}
table
table <- select_(table, "Group", "everything()")
table
library(report)
iris %>%
group_by(Species) %>%
report(median = TRUE)
a <- iris %>%
group_by(Species) %>%
report(median = TRUE)
a$table
a$values$setosa
library(report)
x <- group_by(iris, Species)
groups <- group_vars(x)
ungrouped_x <- ungroup(x)
xlist <- split(ungrouped_x, ungrouped_x[groups], sep = " - ")
text <- paste0("The data contains ", nrow(ungrouped_x),
" observations, grouped by ",
format_text_collapse(groups),
", of the following variables:")
text_full <- text
table <- data.frame()
table_full <- data.frame()
values = list()
for(group in names(xlist)){
data <- xlist[[group]]
data <- dplyr::select(data, -dplyr::one_of(groups))
r <- report(data, median=median, dispersion=dispersion, range=range, levels_percentage=levels_percentage, n_characters=n_characters, missing_percentage = missing_percentage)
current_text <- ""
text <- paste0(text, "\n- ", group, " (n = ", nrow(data), "):", r$values$text_variables)
text_full <- paste0(text, r$values$text_full_variables)
current_table <- r$table
current_table$Group <- group
table <- rbind(table, current_table)
current_table_full <- r$table_full
current_table_full$Group <- group
table_full <- rbind(table_full, current_table_full)
values[[group]] <- r$values
}
current_text <- ""
for(col in names(r$values)){
current_text <- paste0(current_text, "\n  - ", col, ": ", r$values[col]$text)
}
current_text
current_text <- ""
for(col in names(r$values)){
r$values$Sepal.Length
current_text <- paste0(current_text, "\n  - ", col, ": ", r$values[[col]]$text)
}
past
current_text <- ""
for(col in names(r$values)){
current_text <- paste0(current_text, "\n  - ", col, ": ", r$values[[col]]$text)
}
current_text
library(report)
x <- group_by(iris, Species)
report(x)
report(x) %>% to_fulltext()
report(x) %>% to_table()
report(x) %>% to_fulltable()
library(report)
x <- lm(Sepal.Length  ~ Species / Petal.Length, data=iris)
data <- model_data(x)
data
library(report)
model <- lm(Sepal.Length  ~ Species / Petal.Length, data=iris)
CI=95
effsize="cohen1988"
std_report <- report(standardize(model))
std_report <- report(standardize(model, robust=FALSE))
std_report$table
std_table <- std_report$table
names(std_table) <- paste0("Std_", names(std_table))
table_parameters
# Processing
table_parameters <- cbind(broom::tidy(model), broom::confint_tidy(model, CI/100)) %>%
rename_("Parameter"="term",
"beta" = "estimate",
"SE"="std.error",
"t" = "statistic",
"p"="p.value",
"CI_low"="conf.low",
"CI_high"="conf.high")
table_indices <- broom::glance(model) %>%
rename_("R2"="r.squared",
"R2_adj"="adj.r.squared",
"F"="statistic",
"p"="p.value",
"DoF"="df",
"DoF_residual"="df.residual")
table_indices$Formula <- Reduce(paste, deparse(stats::formula(model)))
table_indices$Model_Name <- "linear model"
table_indices$CI <- CI
table_parameters
std_values <- model_values(standardize(model, effsize=NULL, robust=FALSE))
std_values <- std_values$table
std_values
std_values <- std_values
std_values <- model_values(standardize(model, effsize=NULL, robust=FALSE))
std_table <- std_values$table_parameters
std_table
names(std_table) <- paste0("Std_", names(std_table))
std_table
std_table <- select(std_table, one_of("Std_beta", "Std_SE", "Std_CI_low", "Std_CI_high"))
std_table
table_parameters <- cbind(table_parameters, std_table)
table_parameters
library(report)
library(report)
model
effsize="cohen1988",
effsize="cohen1988"
model <- model_values(model, effsize=effsize, ...)
model <- model_values(model, effsize=effsize)
library(report)
model
values <- model_values(model, CI=CI, effsize=effsize, data=data)
model <- model_values(model, effsize=effsize)
model
table_full <- model$table_parameters
table_full
"Std_beta" %in% names(model$table_parameters)
effsize="cohen1988"
table_full$Effect_Size <- interpret_r(table_full$Std_beta, rules=effsize)
table_full
params <- table_full[-1, ]
params$CI <- format_CI(params$CI_low, params$CI_high, model$CI)
params$p_formatted <- paste0("p ", format_p(params$p))
library(report)
library(report)
model <- lm(Sepal.Length ~ Petal.Length + Species, data=iris)
r <- report(model)
to_text(r)
to_fulltext(r)
to_fulltable(r)
library(report)
pkgdown::build_site()
library(report)
r <- report(model, effsize=NULL)
model <- lm(Sepal.Length ~ Petal.Length + Species, data=iris)
r <- report(model, effsize=NULL)
to_fulltext(r)
to_table(r, digits=2)
to_fulltext(r)
to_text(r)
library(report)
pkgdown::build_site()
pkgdown::build_site()
library(report)
rmarkdown::pandoc_version()
styler::style_pkg()
library(report)
pkgdown::build_site()
library(report)
library(report)
pkgdown::build_site()
x <- report(iris)
text <- x$text_full
strwrap(text)
text <- strwrap(text)
cat(text, sep = "\n")
text <- x$text_full
x <- text
text <- stringr::str_split(x, "\n")
text
text <- paste0(text, collapse = "\n")
cat(text)
text <- stringr::str_split(x, "\n")
text
text <- stringr::str_split(x, "\n", simplify=TRUE)
text
text <- paste0(text, collapse = "\n")
cat(text)
text <- stringr::str_split(x, "\n", simplify=TRUE)
text <- strwrap(text)
text <- paste0(text, collapse = "\n")
cat(text)
getOption("width")
getOption("width")
styler::style_pkg
styler::style_pkg()
library(report)
print(report(iris), width=80)
print(report(iris), width=20)
to_fulltext(r, width=80)
r <- report(model)
model <- lm(Sepal.Length ~ Petal.Length + Species, data=iris)
r <- report(model)
to_fulltext(r, width=80)
to_fulltext(r, width=50)
to_fulltext(r, width=10)
library(report)
styler::style_pkg()
pkgdown::build_site()
pkgdown::build_site()
library(report)
iris %>%
group_by(Species) %>%
report(median = TRUE, range = FALSE) %>%
print(width=100)
library(dplyr)
library(report)
iris %>%
group_by(Species) %>%
report(median = TRUE, range = FALSE) %>%
print(width=100)
iris %>%
group_by(Species) %>%
report(median = TRUE, range = FALSE) %>%
print(width=100)
iris %>%
group_by(Species) %>%
report(median = TRUE, range = FALSE)  # Display only the Median and MAD
iris %>%
group_by(Species) %>%
report(median = TRUE, range = FALSE) %>% x
library(dplyr)
library(report)
iris %>%
group_by(Species) %>%
report(median = TRUE, range = FALSE) %>% x
x <- iris %>%
group_by(Species) %>%
report(median = TRUE, range = FALSE)
text <- x$text_full
x <- text
cat(x)
width=80
text <- stringr::str_split(x, "\n", simplify = TRUE)
text <- strwrap(text, width = width)
text <- paste0(text, collapse = "\n")
cat(text)
text
text <- stringr::str_split(x, "\n", simplify = TRUE)
text
x
text <- stringr::str_split(x, fixed("\n"), simplify = TRUE)
text <- stringr::str_split(x, stringr::fixed("\n"), simplify = TRUE)
text
text <- stringr::str_split(x, stringr::coll("\n"), simplify = TRUE)
text
text <- stringr::str_split(x, stringr::coll("\n"), simplify = F)
text
text <- unlist(text)
text
text <- strwrap(text, width = width)
text <- paste0(text, collapse = "\n")
cat(text)
text <- stringr::str_split(x, stringr::coll("\n"), simplify = FALSE)
text <- unlist(text)
text <- strwrap(text, width = width)
text
text <- stringr::str_split(x, stringr::coll("\n"), simplify = FALSE)
text <- unlist(text)
text <- strwrap(text, width = width, simplify=FALSE)
text
text <- stringr::str_split(x, stringr::coll("\n"), simplify = FALSE)
text <- unlist(text)
text
length(text)
nchar(text)
text[nchar(text) < width]
text[nchar(text) > width] <- strwrap(text[nchar(text) > width], width = width)
text[nchar(text) > width]
nchar(text) > width
width=50
(any(nchar(text) > width))
text[nchar(text) > width] <- strwrap(text[nchar(text) > width], width = width)
nchar(text) > width
any(nchar(text) > width)
text <- stringr::str_split(x, stringr::coll("\n"), simplify = FALSE)
text <- unlist(text)
if (is.null(width)) {
width <- 0.9 * getOption("width")
}
nchar(text)
width
nchar(text) > width
any(nchar(text) > width)
text[nchar(text) > width]
nchar(text)
text[nchar(text) > width] <- strwrap(text[nchar(text) > width], width = width, simplify=FALSE)
text
text <- stringr::str_split(x, stringr::coll("\n"), simplify = FALSE)
text <- unlist(text)
text
text <- stringr::str_split(x, stringr::coll("\n"), simplify = FALSE)
text <- unlist(text)
if (is.null(width)) {
width <- 0.9 * getOption("width")
}
wrapped <- ""
for(s in text){
if(nchar(s) > width){
1+1
}
wrapped <- paste0(wrapped, "\n", s)
}
wrapped
cat(wrapped)
wrapped <- ""
for(s in text){
if(nchar(s) > width){
1+1
}
wrapped <- paste0(wrapped, s, "\n")
}
cat(wrapped)
nchar(s)
nchar(s)
s
nchar(s) - stringr::str_trim(s)
leading_spaces <- nchar(s) - nchar(stringr::str_trim(s))
leading_spaces
s <- strwrap(s, width = width)
s
rep(" ", leading_spaces)
s <- paste0(s, collapse = "\n")
s
s
s <- paste0(rep(" ", leading_spaces), s)
s
text <- stringr::str_split(x, stringr::coll("\n"), simplify = FALSE)
text <- unlist(text)
if (is.null(width)) {
width <- 0.9 * getOption("width")
}
wrapped <- ""
for(s in text){
if(nchar(s) > width){
leading_spaces <- nchar(s) - nchar(stringr::str_trim(s))
s <- strwrap(s, width = width)
s <- paste0(s, collapse = "\n")
s <- paste0(rep(" ", leading_spaces), s)
}
wrapped <- paste0(wrapped, s, "\n")
}
text <- paste0(text, collapse = "\n")
cat(text)
cat(wrapped)
library(report)
model <- lm(Sepal.Length ~ Petal.Length + Species, data=iris)
r <- report(model)
r
pkgdown::build_site()
x <- paste(rep("a very long string", 50))
x
x <- paste(rep("a very long string", 50), collapse=" ")
x
format_text_wrap(x, width=50)
library(report)
# Example
lm(Sepal.Length ~ Species, data=iris) %>%
report() %>%
to_text(width=100)
library(dplyr)
# Example
lm(Sepal.Length ~ Species, data=iris) %>%
report() %>%
to_text(width=100)
