format_value(intercept),
".")
intercept <- summary$coefficients[1]
text <- paste0("The model's intercept is at ",
format_value(intercept),
".")
text
table_full <- broom::tidy(model)
table_full
broom::confint_tidy(table_full)
broom::confint_tidy(model)
parameters <- cbind(broom::tidy(model), broom::confint_tidy(model))
augment(model)
broom::augment(model)
broom::glance(model)
parameters
parameters <- cbind(broom::tidy(model), broom::confint_tidy(model)) %>%
rename_("Parameter"="term")
parameters <- cbind(broom::tidy(model), broom::confint_tidy(model)) %>%
rename_("Parameter"="term")
values <- broom::glance(model)
out <- list(table
parameters
parameters <- cbind(broom::tidy(model), broom::confint_tidy(model)) %>%
rename_("term"="Parameter")
parameters
summary(model)
parameters <- cbind(broom::tidy(model), broom::confint_tidy(model)) %>%
rename_("term"="Parameter",
"beta" = "estimate",
"SE"="std.error",
"t" = "statistic",
"p"="p.value",
"CI_low"="conf.low",
"CI_high"="conf.high")
parameters <- cbind(broom::tidy(model), broom::confint_tidy(model)) %>%
rename_("term"="Parameter",
"beta" = "estimate",
"SE"="std.error",
"t" = "statistic",
"p"="p.value",
"CI_low"="conf.low",
"CI_high"="conf.high")
parameters <- cbind(broom::tidy(model), broom::confint_tidy(model)) %>%
rename_("term"="Parameter")
parameters <- cbind(broom::tidy(model), broom::confint_tidy(model)) %>%
rename_("Parameter"="term",
"beta" = "estimate",
"SE"="std.error",
"t" = "statistic",
"p"="p.value",
"CI_low"="conf.low",
"CI_high"="conf.high")
parameters
broom::glance(model)
summary(model)
model$call
table_indices
broom::glance(model)
table_indices <- broom::glance(model) %>%
rename_("R2"="r.squared",
"R2_adj"="adj.r.squared",
"F"="statistic",
"p"="p.value",
"DoF"="df",
"DoF_residual"="df.residual")
table_indices$Formula <- stats::formula(model)
table_indices
stats::formula(model)
table_indices$Formula <- c(stats::formula(model))
table_indices
# Values
values <- as.list(table_indices)
values$table_parameters <- table_parameters
values$table_indices <- table_indices
# Processing
table_parameters <- cbind(broom::tidy(model), broom::confint_tidy(model)) %>%
rename_("Parameter"="term",
"beta" = "estimate",
"SE"="std.error",
"t" = "statistic",
"p"="p.value",
"CI_low"="conf.low",
"CI_high"="conf.high")
values$table_parameters <- table_parameters
values$Parameters <- list()
values$Parameters <- list()
for(parameter in table_parameters$Parameter){
values[[parameter]] <- as.list(table_parameters[table_parameters$Parameter==parameter,])
}
# Values
values <- as.list(table_indices)
values$table_parameters <- table_parameters
values$table_indices <- table_indices
values$Parameters <- list()
for(parameter in table_parameters$Parameter){
values$Parameters[[parameter]] <- as.list(table_parameters[table_parameters$Parameter==parameter,])
}
values$Parameters$Petal.Length
model_parameters.lm <- function(model, ...) {
# Processing
table_parameters <- cbind(broom::tidy(model), broom::confint_tidy(model)) %>%
rename_("Parameter"="term",
"beta" = "estimate",
"SE"="std.error",
"t" = "statistic",
"p"="p.value",
"CI_low"="conf.low",
"CI_high"="conf.high")
table_indices <- broom::glance(model) %>%
rename_("R2"="r.squared",
"R2_adj"="adj.r.squared",
"F"="statistic",
"p"="p.value",
"DoF"="df",
"DoF_residual"="df.residual")
table_indices$Formula <- c(stats::formula(model))
# Values
out <- as.list(table_indices)
out$table_parameters <- table_parameters
out$table_indices <- table_indices
out$Parameters <- list()
for(parameter in table_parameters$Parameter){
out$Parameters[[parameter]] <- as.list(table_parameters[table_parameters$Parameter==parameter,])
}
class(out) <- c("params_lm", "list")
return(out)
}
model <- model_parameters.lm(model)
"params_lm" %in% class(model)
model$Parameters$`(Intercept)`
intercept <- model$Parameters$`(Intercept)`$beta
F_value <- model$`F`
data.frame(R2 = R2,
R2_adj = R2_adj,
`F` = F_value)
R2 <- model$R2
R2_adj <- model$R2_adj
F_value <- model$`F`
DoF <- model$DoF
DoF_residual <- model$DoF_residual
p <- model$p
data.frame(R2 = R2,
R2_adj = R2_adj,
`F` = F_value)
DoF_residual
DoF
library(report)
model <- lm(Sepal.Length ~ Petal.Length, data=iris)
parameters <- model_parameters(model)
parameters
class(t.test())
library(report)
model <- lm(Sepal.Length ~ Petal.Length, data=iris)
values <- model_values(model)
values
initial <- model_initial_parameters(values)
class(values)
library(report)
model <- lm(Sepal.Length ~ Petal.Length, data=iris)
values <- model_values(model)
initial <- model_initial_parameters(values)
initial
outcome = model$terms
model$terms
attributes(outcome)
terms = attributes(model$terms)
terms <- attributes(model$terms)
terms$variables
terms$term.labels
terms$response
terms
formula <- stats::formula(model)
# Get variables
predictors <- all.vars(formula)
outcome <- predictors[[1]]
predictors <- tail(predictors, -1)
outcome
values$Predictors <- tail(predictors, -1)
predictors <- all.vars(values$Formula)
values$Outcome <- predictors[[1]]
values$Predictors <- tail(predictors, -1)
predictors <- all.vars(values$Formula)
values$Outcome <- predictors[[1]]
predictors[[1]]
predictors
# Get variables
values$Formula <- stats::formula(model)
predictors <- all.vars(values$Formula)
values$Outcome <- predictors[[1]]
values$Predictors <- tail(predictors, -1)
text <- paste0("We fitted a linear model to predict ",
values$Outcome,
" with ",
values$Predictors)
text
model <- lm(Sepal.Length ~ Petal.Length * Species, data=iris)
model <- x
values <- model_values(model)
# Get variables
values$Formula <- stats::formula(model)
predictors <- all.vars(values$Formula)
values$Outcome <- predictors[[1]]
values$Predictors <- tail(predictors, -1)
length(values$Predictors) > 1
values$Predictors
values$Predictors[-1]
head(values$Predictors, -1)
paste0(head(values$Predictors, -1), collapse = ", ")
values$Predictors_text <- ifelse(length(values$Predictors) > 1, paste0(paste0(head(values$Predictors, -1), collapse = ", "), values$Predictors[-1], collapse = " and "), values$Predictors)
values$Predictors_text
values$Predictors_text <- ifelse(length(values$Predictors) > 1, paste0(paste0(head(values$Predictors, -1), sep = ", "), values$Predictors[-1], sep = " and "), values$Predictors)
values$Predictors_text
paste0(head(values$Predictors, -1), sep = ", ")
paste0(paste0(head(values$Predictors, -1), collapse = ", "), values$Predictors[-1], collapse = " and ")
paste0(paste0(head(values$Predictors, -1), collapse = ", "), values$Predictors[-1], sep = " and ")
values$Predictors_text <- ifelse(length(values$Predictors) > 1, paste0(paste0(head(values$Predictors, -1), collapse = ", "), " and ", values$Predictors[-1]), values$Predictors)
values$Predictors_text
model <- lm(Sepal.Length ~ Petal.Length * Species + Sepal.Length, data=iris)
model <- lm(Sepal.Length ~ Petal.Length * Species + Petal.Width, data=iris)
values$Formula <- stats::formula(model)
predictors <- all.vars(values$Formula)
values$Outcome <- predictors[[1]]
values$Predictors <- tail(predictors, -1)
values$Predictors_text <- ifelse(length(values$Predictors) > 1, paste0(paste0(head(values$Predictors, -1), collapse = ", "), " and ", values$Predictors[-1]), values$Predictors)
values$Predictors_text
text <- paste0("We fitted a linear model to predict ",
values$Outcome,
" with ",
values$Predictors_text)
text_full <- paste0(text, " (formula = ", as.character(values$Formula))
text_full
as.character(values$Formula)
text_full <- paste0(text, " (formula = ", values$Formula, ")")
text_full
values$Formula
text_full <- paste0(text, " (formula = ", Reduce(paste, deparse(values$Formula)), ")")
text_full
model <- lm(Sepal.Length ~ Petal.Length * Species, data=iris)
library(report)
model <- lm(Sepal.Length ~ Petal.Length * Species, data=iris)
values <- model_values(model)
description <- model_description(values)
performance <- model_performance(values)
initial <- model_initial(values)
performance <- model_performance(values)
model <- model_values(model)
"params_lm" %in% class(model)
class(model)
model <- lm(Sepal.Length ~ Petal.Length * Species, data=iris)
values <- model_values(model)
description <- model_description(values)
performance <- model_performance(values)
initial <- model_initial(values)
initial
library(report)
description <- model_description(values)
performance <- model_performance(values)
model <- values
values <- list()
values$Model_name <- "linear model"
"values_lm" %in% class(model)
values$Formula <- model$Formula
predictors <- all.vars(values$Formula)
values$Outcome <- predictors[[1]]
values$Predictors <- tail(predictors, -1)
values$Predictors_text <- ifelse(length(values$Predictors) > 1, paste0(paste0(head(values$Predictors, -1), collapse = ", "), " and ", values$Predictors[-1]), values$Predictors)
predictors
values$Formula
model$Formula
model$R2
library(report)
model <- lm(Sepal.Length ~ Petal.Length * Species, data=iris)
values <- model_values(model)
description <- model_description(values)
stats::formula(model)
library(report)
model <- lm(Sepal.Length ~ Petal.Length * Species, data=iris)
values <- model_values(model)
description <- model_description(values)
performance <- model_performance(values)
initial <- model_initial(values)
model <- values
library(report)
values <- model_values(model)
model <- lm(Sepal.Length ~ Petal.Length * Species, data=iris)
values <- model_values(model)
description <- model_description(values)
performance <- model_performance(values)
initial <- model_initial(values)
text <- paste(description$text, performance$text, initial$text)
text
library(report)
model <- lm(Sepal.Length ~ Petal.Length * Species, data=iris)
values <- model_values(model)
description <- model_description(values)
performance <- model_performance(values)
initial <- model_initial(values)
text <- paste(description$text, performance$text, initial$text)
text
model <- model_values(model)
model$Parameters$`(Intercept)`
library(report)
model <- lm(Sepal.Length ~ Petal.Length * Species, data=iris)
values <- model_values(model)
table <- data.frame(Intercept = model$Parameters$`(Intercept)`$beta)
text <- paste0("The model's intercept is at ",
format_value(table$Intercept[1]),
".")
table_full <- table
table_full$t <- model$Parameters$`(Intercept)`$t
table_full$CI_low <- model$Parameters$`(Intercept)`$CI_low
table_full$CI_high <- model$Parameters$`(Intercept)`$CI_high
table$Intercept[1]
model <- model_values(model)
table <- data.frame(Intercept = model$Parameters$`(Intercept)`$beta)
text <- paste0("The model's intercept is at ",
format_value(table$Intercept[1]),
".")
table_full <- table
table_full$t <- model$Parameters$`(Intercept)`$t
table_full$CI_low <- model$Parameters$`(Intercept)`$CI_low
table_full$CI_high <- model$Parameters$`(Intercept)`$CI_high
table_full$CI <- model$CI
library(report)
model <- lm(Sepal.Length ~ Petal.Length * Species, data=iris)
description <- model_description(values)
performance <- model_performance(values)
initial <- model_initial(values)
library(report)
values <- model_values(model)
description <- model_description(values)
performance <- model_performance(values)
initial <- model_initial(values)
# parameters <- model_parameters(values)
text <- paste(description$text, performance$text, initial$text)
text_full <- paste(description$text_full, performance$text_full, initial$text_full)
text
text_full
library(report)
model <- lm(Sepal.Length ~ Petal.Length * Species, data=iris)
description <- model_description(values)
performance <- model_performance(values)
initial <- model_initial(values)
# parameters <- model_parameters(values)
text <- paste(description$text, performance$text, initial$text)
text_full <- paste(description$text_full, performance$text_full, initial$text_full)
text
text_full
# parameters <- model_parameters(values)
values$table_parameters
library(report)
library(report)
model <- model_values(model)
table <- model$table_parameters
table
text_full
library(report)
model <- lm(Sepal.Length ~ Petal.Length * Species, data=iris)
model <- model_values(model)
table_full <- model$table_parameters
table_full
table <- table_full
table <- select(table, -one_of("DoF_residual", "SE", "t"))
library(dplyr)
table <- select(table, -one_of("DoF_residual", "SE", "t"))
table
table_full
table_full <- table_full[c("Parameter", "beta", " SE", "t", "DoF_residual", "CI_low", "CI_high", "p")]
table_full <- model$table_parameters
table_full <- table_full[c("Parameter", "beta", " SE", "t", "DoF_residual", "CI_low", "CI_high", "p")]
table_full <- table_full[c("Parameter", "beta", "SE", "t", "DoF_residual", "CI_low", "CI_high", "p")]
table <- table_full[c("Parameter", "beta", "CI_low", "CI_high", "p")]
table
params <- table_full$Parameter[table_full$Parameter != "(Intercept)"]
params
table_full[, -1]
table_full[-1,]
params <- table_full[-1, ]
params
params$CI <- format_CI(params$CI_low, params$CI_high, model$CI)
params$CI <- format_CI(params$CI_low, params$CI_high, model$CI)
param$p <- paste0("p ", format_p(params$p))
s
params$p <- paste0("p ", format_p(params$p))
params
text <- paste0("  - ",
format_value(params$Parameter),
" is ",
interpret_p(params$p),
" (beta = ",
format_value(params$beta),
", ",
params$CI,
", ",
params$p,
")")
text <- paste0("  - ",
params$Parameter,
" is ",
interpret_p(params$p),
" (beta = ",
format_value(params$beta),
", ",
params$CI,
", ",
params$p,
")")
text
interpret_p(params$p)
params <- table_full[-1, ]
params$CI <- format_CI(params$CI_low, params$CI_high, model$CI)
params$p_formatted <- paste0("p ", format_p(params$p))
text <- paste0("  - ",
params$Parameter,
" is ",
interpret_p(params$p),
" (beta = ",
format_value(params$beta),
", ",
params$CI,
", ",
params$p_formatted,
")")
text
text_full <- paste0("  - ",
params$Parameter,
" is ",
interpret_direction(params$beta),
" and ",
interpret_p(params$p),
" (beta = ",
format_value(params$beta),
", t(",
format_value_unless_integer(params$DoF_residual),
") = ",
format_value(params$t),
", ",
params$CI,
", ",
params$p_formatted,
")")
text_full
text <- paste0(text, collapse = "\n")
text
library(report)
model <- lm(Sepal.Length ~ Petal.Length * Species, data=iris)
values <- model_values(model, CI=CI)
CI=95
values <- model_values(model, CI=CI)
description <- model_description(values)
performance <- model_performance(values)
initial <- model_initial(values)
parameters <- model_parameters(values)
library(report)
parameters <- model_parameters(values)
text <- paste(description$text, performance$text, initial$text, parameters$text)
text_full <- paste(description$text_full, performance$text_full, initial$text_full, parameters$text_full)
text
library(report)
model <- lm(Sepal.Length ~ Petal.Length * Species, data=iris)
report(model)
library(report)
model <- lm(Sepal.Length ~ Petal.Length * Species, data=iris)
report(model)
to_fulltext(model)
r <- report(model)
r <- report(model)
to_fulltext(r)
to_text(r)
to_table(r)
to_fulltable(r)
model <- lm(Sepal.Length ~ Species, data=iris)
model <- lm(Sepal.Length ~ Petal.Length + Species, data=iris)
r <- report(model)
to_fulltext(r)
knitr::kable(to_table(r, digits=2))
to_table(r, digits=2)
to_table(r)
x <- r
digits=2
full=FALSE
table <- x$table
initial_order <- names(table)
nums <- dplyr::select_if(table, is.numeric)
nums <- format_value(nums, digits)
fact <- dplyr::select_if(table, is.character)
fact <- cbind(fact, dplyr::select_if(table, is.factor))
table <- cbind(fact, nums)
table <- table[initial_order]
initial_order
table
nums <- dplyr::select_if(table, is.numeric)
nums <- format_value(nums, digits)
fact <- dplyr::select_if(table, is.character)
fact <- cbind(fact, dplyr::select_if(table, is.factor))
fact
nums <- dplyr::select_if(table, is.numeric)
nums
table <- x$table
nums <- format_value(nums, digits)
nums <- dplyr::select_if(table, is.numeric)
nums
nums <- sapply(format_value, nums, digits=digits)
nums <- sapply(nums, format_value, digits=digits)
nums
fact <- dplyr::select_if(table, is.character)
fact <- cbind(fact, dplyr::select_if(table, is.factor))
table <- cbind(fact, nums)
table <- table[initial_order]
table
library(report)
