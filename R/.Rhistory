n_characters = 4
levels_percentage = TRUE
missing_percentage = FALSE
# Table -------------------------------------------------------------------
n_char <- sort(table(x), decreasing=TRUE)
x <- c("A", "B", "C", "A", "B", "B", "D")
# Table -------------------------------------------------------------------
n_char <- sort(table(x), decreasing=TRUE)
perc_char <- n_char/length(x)
perc_char
paste(n_char)
# Table -------------------------------------------------------------------
n_char <- sort(table(x), decreasing=TRUE)
paste(n_char)
paste(n_char, collapse="")
unlist(n_char)
n_char
as.data.frame(n_char)
# Table -------------------------------------------------------------------
n_char <- as.data.frame(sort(table(x), decreasing=TRUE))
n_char$perc <- n_char$x / length(x)
n_char
# Table -------------------------------------------------------------------
n_char <- as.data.frame(sort(table(x), decreasing=TRUE))
n_char$perc <- n_char$x / length(x)
# Table -------------------------------------------------------------------
n_char <- as.data.frame(sort(table(x), decreasing=TRUE))
n_char$x
n_char$perc <- n_char$Freq / length(x)
n_char
# Table -------------------------------------------------------------------
n_char <- as.data.frame(sort(table(x), decreasing=TRUE)) %>%
rename("n" = "Freq")
library(dplyr)
# Table -------------------------------------------------------------------
n_char <- as.data.frame(sort(table(x), decreasing=TRUE)) %>%
rename("n" = "Freq")
n_char
# Table -------------------------------------------------------------------
n_char <- as.data.frame(sort(table(x), decreasing=TRUE)) %>%
rename("n" = "Freq",
1 = "Entry")
# Table -------------------------------------------------------------------
n_char <- as.data.frame(sort(table(x), decreasing=TRUE)) %>%
rename("n" = "Freq",
"1" = "Entry")
names(n_char) <- c("Entry", "n")
n_char
# Table -------------------------------------------------------------------
n_char <- as.data.frame(sort(table(x), decreasing=TRUE))
names(n_char) <- c("Entry", "n_Entry")
n_char$perc_Entry <- n_char$n / length(x)
n_char <- as.data.frame(sort(table(x), decreasing=TRUE))
names(n_char) <- c("Entry", "n_Entry")
n_char$perc_Entry <- n_char$n_Entry / length(x)
n_char
x <- c("A", "B", "C", "A", "B", "B", "D", "E", "A")
n_char <- as.data.frame(sort(table(x), decreasing=TRUE))
names(n_char) <- c("Entry", "n_Entry")
n_char$perc_Entry <- n_char$n_Entry / length(x)
n_char
x <- c("A", "B", "C", "A", "B", "B", "D", "E", "B", "D")
n_char <- as.data.frame(sort(table(x), decreasing=TRUE))
names(n_char) <- c("Entry", "n_Entry")
n_char$perc_Entry <- n_char$n_Entry / length(x)
n_char
x <- c("A", "B", "C", "A", "B", "B", "D", "E", "B", "D", "A")
n_char <- as.data.frame(sort(table(x), decreasing=TRUE))
names(n_char) <- c("Entry", "n_Entry")
n_char$perc_Entry <- n_char$n_Entry / length(x)
n_char
table_full <- data.frame(
n_Obs = length(x),
n_Missing = sum(is.na(x))
)
table_full$perc_Missing <- table_full$n_Missing / table_full$n_Obs
library(report)
format_text_collapse(c("A", "B", "C"))
testthat::expect_equal(format_text_collapse(c("A", "B", "C")), "A, B and C", tol = 0)
x <- paste(rep("a very long string", 50), collapse=" ")
x <- paste(rep("a very long string", 50), collapse=" \n")
nchar(format_text_wrap(x, width=50))
testthat::expect_equal(nchar(format_text_wrap(x, width=50)), 999, tol = 0)
format_text_wrap(x, width=50)
x
nchar(x)
x <- paste(rep("a very long string", 50), collapse=" \n")
nchar(format_text_wrap(x, width=25))
interpret_d(0.021)
interpret_d(0.6)
interpret_d(c(0.45, 0.85))
interpret_d(0.45)
interpret_d(0.55)
interpret_d(1.3, rules="sawilowsky2009")
interpret_d(0.6, rules=rules(c(0.5, "A", "B"))
)
interpret_d(0.6, rules=rules(c(0.5), c("A", "B")))
rules(c(0.5), c("A", "B"))
rules=rules(c(0.5), c("A", "B"))
is.rules(rules)
d <- 0/6
d <- 0.5
interpret(abs(d), rules)
model <- rstanarm::stan_glm(Sepal.Width ~ Species * Petal.Length, data=iris)
info <- rstanarm::prior_summary(model)
info <- model$prior.info
# Intercept
df <- as.data.frame(t(sapply(info$prior_intercept, c)))
df$parameter <- "(Intercept)"
# Aux
if(!is.null(info$prior_aux)){
aux <- info$prior_aux
max_length <- max(sapply(aux, length))
for(i in names(aux)){
if(length(i) < max_length){
aux[[i]] <- rep(aux[[i]], max_length)
}
}
aux <- as.data.frame(t(sapply(aux$aux, c)))
df$parameter <- aux$aux_name
df <- rbind(df, aux[names(aux) %in% names(df)])
}
df
# Intercept
df <- as.data.frame(t(sapply(info$prior_intercept, c)))
df$parameter <- "(Intercept)"
aux <- info$prior_aux
max_length <- max(sapply(aux, length))
for(i in names(aux)){
if(length(i) < max_length){
aux[[i]] <- rep(aux[[i]], max_length)
}
}
aux <- as.data.frame(t(sapply(aux$aux, c)))
aux$parameter <- aux$aux_name
df <- rbind(df, aux[names(aux) %in% names(df)])
df
# Intercept
df <- as.data.frame(t(sapply(info$prior_intercept, c)))
df$parameter <- "(Intercept)"
aux <- info$prior_aux
max_length <- max(sapply(aux, length))
for(i in names(aux)){
if(length(i) < max_length){
aux[[i]] <- rep(aux[[i]], max_length)
}
}
aux <- as.data.frame(t(sapply(aux$aux, c)))
aux$parameter <- aux$aux_name
aux
aux <- info$prior_aux
max_length <- max(sapply(aux, length))
for(i in names(aux)){
if(length(i) < max_length){
aux[[i]] <- rep(aux[[i]], max_length)
}
}
aux <- as.data.frame(t(sapply(aux$aux, c)))
aux
aux <- info$prior_aux
max_length <- max(sapply(aux, length))
for(i in names(aux)){
if(length(i) < max_length){
aux[[i]] <- rep(aux[[i]], max_length)
}
}
aux
aux <- as.data.frame(t(sapply(aux, c)))
aux$parameter <- aux$aux_name
df <- rbind(df, aux[names(aux) %in% names(df)])
# Aux
if(!is.null(info$prior_aux)){
aux <- info$prior_aux
max_length <- max(sapply(aux, length))
for(i in names(aux)){
if(length(i) < max_length){
aux[[i]] <- rep(aux[[i]], max_length)
}
}
aux <- as.data.frame(t(sapply(aux, c)))
aux$parameter <- aux$aux_name
df <- rbind(df, aux[names(aux) %in% names(df)])
}
df
# Intercept
df <- as.data.frame(t(sapply(info$prior_intercept, c)))
df$parameter <- "(Intercept)"
# Aux
if(!is.null(info$prior_aux)){
aux <- info$prior_aux
max_length <- max(sapply(aux, length))
for(i in names(aux)){
if(length(i) < max_length){
aux[[i]] <- rep(aux[[i]], max_length)
}
}
aux <- as.data.frame(t(sapply(aux, c)))
aux$parameter <- aux$aux_name
df <- rbind(df, aux[names(aux) %in% names(df)])
}
df
# Aux
if(!is.null(info$prior)){
priors <- info$prior
max_length <- max(sapply(priors, length))
for(i in names(priors)){
if(length(i) < max_length){
priors[[i]] <- rep(priors[[i]], max_length)
}
}
priors <- as.data.frame(t(sapply(priors, c)))
priors$parameter <- priors$aux_name
df <- rbind(df, priors[names(priors) %in% names(df)])
}
priors <- info$prior
df
priors <- info$prior
max_length <- max(sapply(priors, length))
priors
priors <- info$prior
max_length <- max(sapply(priors, length))
for(i in names(priors)){
if(length(i) < max_length){
priors[[i]] <- rep(priors[[i]], max_length)
}
}
priors <- as.data.frame(t(sapply(priors, c)))
priors
priors <- info$prior
max_length <- max(sapply(priors, length))
for(i in names(priors)){
if(length(i) < max_length){
priors[[i]] <- rep(priors[[i]], max_length)
}
}
priors
priors <- info$prior
max_length <- max(sapply(priors, length))
for(i in names(priors)){
if(length(priors[[i]]) < max_length){
priors[[i]] <- rep(priors[[i]], max_length)
}
}
priors
priors <- as.data.frame(t(sapply(priors, c)))
priors
priors <- info$prior
max_length <- max(sapply(priors, length))
for(i in names(priors)){
if(length(priors[[i]]) < max_length){
priors[[i]] <- rep(priors[[i]], max_length)
}
}
as.data.frame(sapply(priors, c))
priors <- as.data.frame(sapply(priors, c))
priors <- info$prior
max_length <- max(sapply(priors, length))
for(i in names(priors)){
if(length(priors[[i]]) < max_length){
priors[[i]] <- rep_len(priors[[i]], max_length)
}
}
priors <- info$prior
max_length <- max(sapply(priors, length))
max_length
priors <- info$prior
max_length <- max(sapply(priors, length))
for(i in names(priors)){
if(length(priors[[i]]) < max_length){
priors[[i]] <- rep_len(c(priors[[i]]), max_length)
}
}
priors[[i]]
if(!is.null(info$prior)){
priors <- info$prior
max_length <- max(sapply(priors, length))
for(i in names(priors)){
if(length(priors[[i]]) < max_length){
if(!is.null(priors[[i]])){
priors[[i]] <- NA
}
priors[[i]] <- rep_len(priors[[i]], max_length)
}
}
priors <- as.data.frame(sapply(priors, c))
priors <- info$prior
max_length <- max(sapply(priors, length))
for(i in names(priors)){
if(length(priors[[i]]) < max_length){
if(!is.null(priors[[i]])){
priors[[i]] <- NA
}
priors[[i]] <- rep_len(priors[[i]], max_length)
}
}
priors <- info$prior
max_length <- max(sapply(priors, length))
for(i in names(priors)){
if(length(priors[[i]]) < max_length){
if(is.null(priors[[i]])){
priors[[i]] <- NA
}
priors[[i]] <- rep_len(priors[[i]], max_length)
}
}
prio
priors <- info$prior
max_length <- max(sapply(priors, length))
for(i in names(priors)){
if(length(priors[[i]]) < max_length){
if(is.null(priors[[i]])){
priors[[i]] <- NA
}
priors[[i]] <- rep_len(priors[[i]], max_length)
}
}
priors <- as.data.frame(sapply(priors, c))
priors
insight::find_parameters(model)
priors$parameter <- tail(insight::find_parameters(model)$conditional, -1)
info <- rstanarm::prior_summary(model)
info <- model$prior.info
# Intercept
df <- as.data.frame(t(sapply(info$prior_intercept, c)))
df$parameter <- "(Intercept)"
# Priors
if(!is.null(info$prior)){
priors <- info$prior
max_length <- max(sapply(priors, length))
for(i in names(priors)){
if(length(priors[[i]]) < max_length){
if(is.null(priors[[i]])){
priors[[i]] <- NA
}
priors[[i]] <- rep_len(priors[[i]], max_length)
}
}
priors <- as.data.frame(sapply(priors, c))
priors$parameter <- tail(insight::find_parameters(model)$conditional, -1)
df <- rbind(df, priors[names(priors) %in% names(df)])
}
# Aux
if(!is.null(info$prior_aux)){
aux <- info$prior_aux
max_length <- max(sapply(aux, length))
for(i in names(aux)){
if(length(aux[[i]]) < max_length){
if(is.null(aux[[i]])){
aux[[i]] <- NA
}
aux[[i]] <- rep_len(aux[[i]], max_length)
}
}
aux <- as.data.frame(t(sapply(aux, c)))
aux$parameter <- aux$aux_name
df <- rbind(df, aux[names(aux) %in% names(df)])
}
df <- df[c("parameter", names(df)[names(df) != "parameter"])]
names(df) <- gsub("dist", "distribution", names(df))
names(df) <- gsub("df", "DoF", names(df))
df
priors <- info$prior
.priors_to_df <- function(priors){
max_length <- max(sapply(priors, length))
for(i in names(priors)){
if(length(priors[[i]]) < max_length){
if(is.null(priors[[i]])){
priors[[i]] <- NA
}
priors[[i]] <- rep_len(priors[[i]], max_length)
}
}
priors <- as.data.frame(sapply(priors, c))
return(priors)
}
# Intercept
df <- .priors_to_df(info$prior_intercept)
df$parameter <- "(Intercept)"
df
.priors_to_df(info$prior)
priors <- info$prior_intercept
priors
max_length <- max(sapply(priors, length))
max_length
for(i in names(priors)){
if(length(priors[[i]]) < max_length){
if(is.null(priors[[i]])){
priors[[i]] <- NA
}
priors[[i]] <- rep_len(priors[[i]], max_length)
}
}
as.data.frame(sapply(priors, c))
as.data.frame(t(sapply(priors, c)))
.priors_to_df <- function(priors){
max_length <- max(sapply(priors, length))
for(i in names(priors)){
if(length(priors[[i]]) < max_length){
if(is.null(priors[[i]])){
priors[[i]] <- NA
}
priors[[i]] <- rep_len(priors[[i]], max_length)
}
}
if(max_length == 1){
priors <- as.data.frame(t(sapply(priors, c)))
}else{
priors <- as.data.frame(sapply(priors, c))
}
return(priors)
}
info <- model$prior.info
# Intercept
df <- .priors_to_df(info$prior_intercept)
df$parameter <- "(Intercept)"
# Priors
priors <- .priors_to_df(info$prior)
priors$parameter <- tail(insight::find_parameters(model)$conditional, -1)
df <- rbind(df, priors[names(priors) %in% names(df)])
# Aux
aux <- .priors_to_df(info$prior_aux)
aux$parameter <- aux$aux_name
df <- rbind(df, aux[names(aux) %in% names(df)])
df <- df[c("parameter", names(df)[names(df) != "parameter"])]
names(df) <- gsub("dist", "distribution", names(df))
names(df) <- gsub("df", "DoF", names(df))
df
knitr::kable(df)
model <- circus::download_model("lm_3")
data <- insight::get_data(model)
data
insight::find_parameters(model)
data[insight::find_parameters(model)$conditional]
insight::find_parameters(model)$conditional
insight::find_terms(model)
data[insight::find_terms(model)$conditional]
data <- insight::get_data(model)[insight::find_terms(model)$conditional]
text <- ""
for(col in names(data)){}
is.numeric(data[col])
col
text <- list()
text <- c()
levels(data[col])
data[col]
is.factor(data[col])
is.numeric(data[col])
is.factor(data[[col]])
is.numeric(data[[col]])
text <- c()
for(col in names(data)){
if(is.numeric(data[[col]])){
text <- c(text, paste0(col," = 0"))
} else if(is.factor(data[[col]])){
text <- c(text, paste0(col," = ", levels(data[col])))
}
text <- c()
for(col in names(data)){
if(is.numeric(data[[col]])){
text <- c(text, paste0(col," = 0"))
} else if(is.factor(data[[col]])){
text <- c(text, paste0(col," = ", levels(data[col])))
} else{
text <- c(text, paste0(col," = ???"))
}
text <- c()
for(col in names(data)){
if(is.numeric(data[[col]])){
text <- c(text, paste0(col," = 0"))
} else if(is.factor(data[[col]])){
text <- c(text, paste0(col," = ", levels(data[col])))
} else{
text <- c(text, paste0(col," = ???"))
}
}
text
report::format_text_collapse(text)
